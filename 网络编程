  一、IP因特网
    因特网的客户端和服务端混合使用套接字借口函数和Unix I/O函数来进行通信；将套接字函数实现为系统调用，这些系统会陷入内核，并调用各种内核,并调用各种内核模式的TCP/IP函数。
TCP/IP是一个协议族，每一个提供的功能都不一样；IP协议提供基本的命名方法和递送机制，该机制可以通过因特网主机向其他主机发送包，这种包成为数据包；通过UDP（不可靠数据包协议）扩展IP，缓解其机制的不可靠；
使包可以在进程间传送而不是主机间；TCP提供了进程间可靠地全双工连接。
1.1 IP地址
    一个IP地址是一个32无符号整数。IP地址由点分十进制来表示，而电脑是只能辨识0和1的，因此要将IP地址进行转换；应用程序需要inet_pton()和inet_ntop()函数来进行IP地址和点分十进制串之间的转换。
调用其需要包含头文件：arpa/inet.h。inet_pton函数将一个点分十进制串转换为一个二进制的网络字节顺序的IP地址；inet_ntop函数讲一个二进制的网络字节顺序的IP地址转换为它所对应的点分十进制表示。
1.2 因特网域名
   因特网定义了域名集合和IP地址集合之间的映射。
1.3 因特网连接
   因特网客户端和服务端通过在连接上发送和接受字节流来通信，是点对点的；对其数据而言，是双向的，全双工。
   一个套接字是连接的一个端点，每个套接字都有对应的套接字地址，由一个因特网地址和一个16位的整数端口组成，地址：端口，来表示。
   一个连接是由它两端的套接字地址唯一确定的，成为套接字对：(cliaddr:cliport,servaddr:servport);cliaddr是客户端的IP，cliport是端口，为临时端口，servaddr是服务器的IP，servport是端口。、
1.4 套接字接口
   套接字接口是一组函数，将系统的I/O函数结合起来，从而创建网络应用；有个结构图，见《深度理解计算机系统》p652 
 1.4.1 地址结构
   从Linux内核来看，一个套接字就是一个通信的端点，从程序来看，套接字就是一个有相应描述符的打开文件；
   IP 套接字地址存放在如下结构体中：
   struct socketddr_in {   //IP地址存放结构体
   uint16_t sin_family ; //协议族
   uint16_t sin_port;    //端口
   struct in_addr sin_addr; //IP地址
   unsigned char sin_zero[8]; //存放
   };
  
   struct sockaddr {  //大端口套接字地址结构体，用来 连接connect、绑定bind、接收accept
   uint16_t sa_family; //协议族
   char sa_data[14];  //地址数据
   };
 1.4.2 socket函数
   客户端和服务端使用socket函数来创建一个套接字描述符。
   #include<sys/types.h>
   #include<sys/socket.h>
   
   int socket(int domain ,int type, int protocol);
   要成为一个连接的端点，需用硬编码来调用socket函数：
   clientfd=Socket(AF_INET, SOCK_STREAM, 0);
   其中，AF_INET----32为IP地址，SOCK_STREAM表示这个套接字是一个连接的一个端点。
 1.4.3 connect函数
   客户端通过调用connect函数来建立和服务器的连接。
   #include<sys/socket.h>
   int connect(int clientfd,const struct sockaddr *addr,socklen_t addrlen);
   其中，connect 函数试图与套接字地址为addr的服务器建立一个因特网连接，其中addrlen是sizeof（sockaddr_in）。函数会有阻塞，直到连接成功时，clientfd描述符准备可以读写，
 得到一个套接字对，见上述。
 1.4.4 bind函数
   #include<sys/socket.h>
   int bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen); 
   bind函数通知内核将addr中的服务器套接字地址和套接字描述符sockfd联系起来。参数addrlen就是sizeof（sockaddr_in）。
 1.4.5 listen函数
   客户端是发起连接请求的主动实体，服务器是等待来自客户端的链接请求的被动实体。
   #include<sys/socket.h>
   intolisten(int sockfd, int backlog);
   listen 函数将sockfd从一个主动套接字转化为一个监听套接字，可以接收来自客户端的连接请求。backlog暗示了内核在开始拒绝连接请求之前，队列中要排队的未完成的连接请求的数量。
   
 1.4.6 accept函数
   服务器通过调动accept函数来等待来自客户端的连接请求。
   #include<sys/socket.h>
   int accept(int listenfd, struct sockaddr *addr,int addrlen);
   等待来自侦听描述符listenfd,然后在addr中填写客户端的套接字地址，并返回一个已连接描述符，用来与客户端连接。
    
   
   








